# Fancy colorful echo messages
function msgout(){
	local color=$1;
	local message=$2;
	if ! [[ $color =~ '^[0-9]$' ]] ; then
		case $(echo -e $color | tr '[:upper:]' '[:lower:]') in
			# black
			header) color=0 ;;
			# red
			error) color=1 ;;
			# green
			success) color=2 ;;
			# yellow
			welcome) color=3 ;;
			# blue
			title) color=4 ;;
			# purple
			info) color=5 ;;
			# cyan
			question) color=6 ;;
			# orange
			warning) color=202 ;;
			# white
			*) color=7 ;;
		esac
	fi
	tput bold;
	tput setaf $color;
	echo '-- '$message;
	tput sgr0;
}
#Flash my sonoff's with Tasmota
function flashtasmota(){
	wget -P /tmp/ http://thehackbox.org/tasmota/release/tasmota-minimal.bin
	sudo esptool.py --port /dev/ttyUSB0 --baud 115200 write_flash -fs 1MB -fm dout 0x0 /tmp/tasmota-minimal.bin
	rm -R /tmp/tasmota-minimal.bin
	
}

function getip() {
	curl -m 15 -s "https://httpbin.org/ip" | grep --color=no -oE '[0-9.]+' || curl -m 15 -s "ifconfig.me"
}
function getgateway() {
	local gw
	gw="$(route -n | grep -E '^0.0.0.0' | xargs | cut -d' ' -f2)"
	[ -n "$gw" ] && echo "$gw" || return 1
}
function checkinternet() {
	wget --timeout=15 "google.com" || wget --timeout=15 "bing.com"
	rm -R ~/index.html
}
function checkdns() {
	ping -c 1 -q "8.8.8.8"
}

function domaindns(){
	# Purpose: DNS Propagation checker
	# Source: https://guides.wp-bullet.com


	NS=($(dig ${1} NS +short))
	A=($(dig ${1} A +short))
	TXT=($(dig ${1} TXT +short))
	CNAME=($(dig ${1} CNAME +short))

	echo "NS: ${NS}"
	echo "A: ${A}"
	echo "TXT:" $TXT
	echo "CNAME: ${CNAME}"
}

function checkip() {

	local hostname="$(nmblookup -A "$1" | sed -n 2p | awk '{print $1}')"
	if [ "$(ping -c 1 -q "$1" | sed -n 4p | awk '{print $4}')" == 1 ]; then
		msgout success $hostname "is Online"
	else
		msgout error "Offline"
	fi
}
function checkgateway() {
	ping -c 1 -q "$(route -n | grep -E '^0.0.0.0' | xargs | cut -d' ' -f2)"
}

# Usage: extract <file>
# Description: extracts archived files / mounts disk images
# Note: .dmg/hdiutil is macOS-specific.
#
# credit: http://nparikh.org/notes/zshrc.txt
function extract () {
    if [ -f $1 ]; then
        case $1 in
            *.tar.bz2)  tar -jxvf $1                        ;;
            *.tar.gz)   tar -zxvf $1                        ;;
            *.bz2)      bunzip2 $1                          ;;
            *.dmg)      hdiutil mount $1                    ;;
            *.gz)       gunzip $1                           ;;
            *.tar)      tar -xvf $1                         ;;
            *.tar.xz)   tar -xJf $1                         ;;
            *.tbz2)     tar -jxvf $1                        ;;
            *.tgz)      tar -zxvf $1                        ;;
            *.zip)      unzip $1                            ;;
            *.ZIP)      unzip $1                            ;;
            *.pax)      cat $1 | pax -r                     ;;
            *.pax.Z)    uncompress $1 --stdout | pax -r     ;;
            *.rar)      unrar x $1                          ;;
            *.Z)        uncompress $1                       ;;
            *)          echo "'$1' cannot be extracted/mounted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function compress() {
	local tmpFile="${2}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${2}" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${2}" 2> /dev/null;  # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…";
	"${cmd}" -v "${2}" || return 1;
	[ -f "${2}" ] && rm "${2}";

	zippedSize=$(
		stat -f"%z" "${2}.gz" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${2}.gz" 2> /dev/null; # GNU `stat`
	);

	echo "${2}.gz ($((zippedSize / 1000)) kB) created successfully.";
}
#Download stuff from YouTube
function bookdl(){
	yt-dlp --ignore-errors -f bestaudio --extract-audio --audio-format m4a --embed-thumbnail --audio-quality 0 $1 -o '~/dwnx/%(artist)s/%(album)s/%(title)s.%(ext)s'
	msgout success "Book downloaded!"
}
function musicdl(){
	yt-dlp --ignore-errors -f bestaudio --extract-audio --audio-format m4a --embed-thumbnail --audio-quality 0 $1 -o '~/dwnx/%(title)s.%(ext)s'
}
function videodl(){
	yt-dlp $1 -o '~/dwnx/%(title)s.%(ext)s' -f 'bestvideo[height>=720]+bestaudio/best[height>=720]'
}
function playlistdl(){
	yt-dlp --ignore-errors -f bestaudio --extract-audio --audio-format m4a --audio-quality 0 $1 -o '~/dwx/%(artist)s/%(album)s/%(title)s.%(ext)s'
	msgout success "Music downloaded!"
}

function ffind(){
	sudo find / -name *$1* 2>/dev/null
}
function mp42gif(){
	if [[ -z "$1" ]]; then
		echo "No video file specified"
		exit 1
	fi

	# get everything after last /
	video=${1##*/}
	# remove everything after .
	filename=${video%.*}

	echo -e "$(tput bold)Getting video dimensions $(tput sgr0)"
	# Get video dimensions
	dimensions=$(ffprobe -v error -select_streams v:0 -show_entries stream=width,height -of csv=s=x:p=0 "$1")

	echo -e "$(tput bold)Generating Palette $(tput sgr0)"
	# Generate palette
	ffmpeg -i "$1" -vf "fps=22,scale=${dimensions%x*}:-1:flags=lanczos,palettegen" "$filename".png

	echo -e "$(tput bold)Converting Video to GIF $(tput sgr0)"

	if [[ "$2" ]]; then
		ffmpeg -t "$2" -i "$1" -i "$filename".png -filter_complex "fps=22,scale=${dimensions%x*}:-1:flags=lanczos[x];[x][1:v]paletteuse" "$filename".gif
	else
		ffmpeg -i "$1" -i "$filename".png -filter_complex "fps=22,scale=${dimensions%x*}:-1:flags=lanczos[x];[x][1:v]paletteuse" "$filename".gif
	fi

	echo -e "Removing palette"
	rm "$filename".png
}

function man2pdf(){	
	man -t $1 | ps2pdf - ~/$DOWNLOAD_FOLDER/$1.pdf
}

#Meteo in CLI
function meteo() {
  local LOCALE=$(echo ${LANG:-en} | cut -c1-2)
  if [ $# -eq 0 ]; then
    local LOCATION=$(curl -s ipinfo.io/loc)
  else
    local LOCATION=$1
  fi
  curl -s "$LOCALE.wttr.in/$LOCATION"
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}…";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}

#To reset TeamViewer settings and stop showing the warning
function teamviewer_reset(){
	sudo teamviewer --daemon stop
	sudo ifconfig eno1 down
	sudo macchanger -r eno1 > /dev/null
	sudo ifconfig eno1 up
	sudo rm -rf /opt/teamviewer/config/global.conf
	sudo teamviewer --daemon start
}

function ydl_update(){
	sudo yt-dlp -U &> /dev/null
	msgout success "yt-dlp updated!"
}

function repos(){
	cd /etc/yum.repos.d/
}

function myip(){
	myexternalip="$(curl https://ipinfo.io/ip 2>/dev/null)"
	mylocalip="$(ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1' | sed -n 1p)"
	msgout warning "External: ${myexternalip}"
	msgout success "Local: ${mylocalip}"
}

function compress_mp4(){
	for f in *; do mv "$f" "${f// /_}"; done

	files=$( ls -1 | sed -e 's/\.mp4$//' )
	for file in $files; do
		ffmpeg -i ${file}.mp4 -c:v libx264 -profile:v baseline -level 3.0 -pix_fmt yuv420p ${file}_compressed.mp4
	done;
}
function mp4_to_webm(){
	for f in *; do mv "$f" `echo $f | tr ' ' '_'`; done
	files=$( ls -1 | sed -e 's/\.mp4$//' )
	for file in $files; do
		ffmpeg -i ${file}.mp4 -qscale 0 ${file}.webm
	done;
}

function fhistory(){
	history | grep $1
}

function mergevideos(){
	directory=$(pwd)
	rm -R inputs.txt
	rm -R output.${1}
	#Replace spaces from the names to underscores
	for i in *' '* ; do mv "$i" "${i// /_}" ; done
	#Grab the files into an array
	files=$( find . -type f -name "*.${1}" | sort -V )
	#Create a list of inputs 
	for i in $files; do 
		echo "file '$i'" >> inputs.txt
	done;
	#do the magic
	ffmpeg -f concat -safe 0 -i inputs.txt -c copy output.${1}
}

function ODT2PDF(){
	#Replace spaces from the names to underscores
	for i in *' '* ; do mv "$i" "${i// /_}" ; done
	sudo libreoffice --headless --convert-to pdf *.odt
	sudo pdfunite $(ls *.pdf | sort -n) Book_of_Labs.pdf
	sudo cp Book_of_Labs.pdf ../StudentBundle/
	#sudo rm -R *.pdf
}
function ODP2PDF(){
	#Replace spaces from the names to underscores
	for i in *' '* ; do mv "$i" "${i// /_}" ; done
	sudo libreoffice --headless --convert-to pdf *.odp
	sudo pdfunite $(ls *.pdf | sort -n) Book_of_Slides.pdf
	sudo cp Book_of_Slides.pdf ../StudentBundle/
	#sudo rm -R *.pdf
}

function filesymlinks(){
	find -L / -xtype l -samefile $1 2>/dev/null
}
function allsymlinks(){
	find $1 -type l -exec ls -lad {} \;
}

function normalize_filenames(){
    for f in *; do mv "$f" "${f// /_}"; done
}