# Fancy colorful echo messages
function msgout(){
	local color=$1;
	local message=$2;
	if ! [[ $color =~ '^[0-9]$' ]] ; then
		case $(echo -e $color | tr '[:upper:]' '[:lower:]') in
			# black
			header) color=0 ;;
			# red
			error) color=1 ;;
			# green
			success) color=2 ;;
			# yellow
			welcome) color=3 ;;
			# blue
			title) color=4 ;;
			# purple
			info) color=5 ;;
			# cyan
			question) color=6 ;;
			# orange
			warning) color=202 ;;
			# white
			*) color=7 ;;
		esac
	fi
	tput bold;
	tput setaf $color;
	echo '-- '$message;
	tput sgr0;
}

function getip() {
	curl -m 15 -s "https://httpbin.org/ip" | grep --color=no -oE '[0-9.]+' || curl -m 15 -s "ifconfig.me"
}
function getgateway() {
	local gw
	gw="$(route -n | grep -E '^0.0.0.0' | xargs | cut -d' ' -f2)"
	[ -n "$gw" ] && echo "$gw" || return 1
}
function checkinternet() {
	wget --timeout=15 "google.com" || wget --timeout=15 "bing.com"
	rm -R ~/index.html
}
function checkdns() {
	ping -c 1 -q "8.8.8.8"
}

function checkip() {

	local hostname="$(nmblookup -A "$1" | sed -n 2p | awk '{print $1}')"
	if [ "$(ping -c 1 -q "$1" | sed -n 4p | awk '{print $4}')" == 1 ]; then
		msgout success $hostname "is Online"
	else
		msgout error "Offline"
	fi
}
function checkgateway() {
	ping -c 1 -q "$(route -n | grep -E '^0.0.0.0' | xargs | cut -d' ' -f2)"
}

# Usage: extract <file>
# Description: extracts archived files / mounts disk images
# Note: .dmg/hdiutil is macOS-specific.
#
# credit: http://nparikh.org/notes/zshrc.txt
function extract () {
    if [ -f $1 ]; then
        case $1 in
            *.tar.bz2)  tar -jxvf $1                        ;;
            *.tar.gz)   tar -zxvf $1                        ;;
            *.bz2)      bunzip2 $1                          ;;
            *.dmg)      hdiutil mount $1                    ;;
            *.gz)       gunzip $1                           ;;
            *.tar)      tar -xvf $1                         ;;
            *.tbz2)     tar -jxvf $1                        ;;
            *.tgz)      tar -zxvf $1                        ;;
            *.zip)      unzip $1                            ;;
            *.ZIP)      unzip $1                            ;;
            *.pax)      cat $1 | pax -r                     ;;
            *.pax.Z)    uncompress $1 --stdout | pax -r     ;;
            *.rar)      unrar x $1                          ;;
            *.Z)        uncompress $1                       ;;
            *)          echo "'$1' cannot be extracted/mounted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function compress() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
	);

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}
#Download stuff from YouTube
function bookdl(){
	youtube-dl --ignore-errors -f bestaudio --extract-audio --audio-format mp3 --audio-quality 0 $1 -o '$AUDIO_BOOKS_FOLDER/%(artist)s/%(album)s/%(title)s.%(ext)s'
	msgout success "Book downloaded!"
	cd $AUDIO_BOOKS_FOLDER
}
function musicdl(){
	youtube-dl --ignore-errors -f bestaudio --extract-audio --audio-format mp3 --audio-quality 0 $1 -o '$MUSIC_FOLDER/%(title)s.%(ext)s'
	msg $MUSIC_FOLDER
}
function playlistdl(){
	youtube-dl --ignore-errors -f bestaudio --extract-audio --audio-format mp3 --audio-quality 0 $1 -o '$MUSIC_FOLDER/TMP/%(title)s.%(ext)s'
	msgout success "Music downloaded!"
	cd $MUSIC_FOLDER/TMP/
}

function audible2pc(){
	cd /run/user/1000/gvfs/mtp\:host\=Android_Android_b0d2615a/Armazen.\ interno\ partilhado/Android/data/com.audible.application/files
	find . -name '*.aax' -print0 | xargs -0 cp -n -t /mnt/Stuff/OpenAudible/aax/
	cd ~
	/mnt/Stuff/OpenAudible/OpenAudible
}

function man2pdf(){	
	man -t $1 | ps2pdf - ~/$DOWNLOAD_FOLDER/$1.pdf
}

#shutdown my server
function hpoff(){
	net rpc shutdown -C MESSAGE -I HPSERVER -U PJFonseca -f -t 1
}
#Meteo in CLI
function meteo() {
  local LOCALE=$(echo ${LANG:-en} | cut -c1-2)
  if [ $# -eq 0 ]; then
    local LOCATION=$(curl -s ipinfo.io/loc)
  else
    local LOCATION=$1
  fi
  curl -s "$LOCALE.wttr.in/$LOCATION"
}

# This will generate two scripts and copy them to the target server
# that has cPanel on it and needs SSL certificates. 
# The port 21098 used by my provider (namecheap.com) in the SSH connections.
# Feel free to change.
#
# This is based on this tutorial: https://github.com/Neilpang/acme.sh/wiki/Simple-guide-to-add-TLS-cert-to-cpanel
# Thank you Neil Pang for this awesome script. Find him at https://twitter.com/neilpangxa

function rssl(){
	#Gatering info needed
	local SERVER=""
	local EMAIL=""
	local DOMAIN=""
	local CPANELUSERNAME=""

	while [[ $SERVER == '' ]] # While SERVER is empty...
	do
		read -p "Server (username@domain): " SERVER # Ask the user to enter the server details
	done 
	
	while [[ $EMAIL == '' ]] # While EMAIL is empty...
	do
		read -p "Email: " EMAIL # Ask the user to enter the email
	done 
	
	while [[ $DOMAIN == '' ]] # While DOMAIN is empty...
	do
		read -p "Domain (without www): " DOMAIN # Ask the user to enter the domain
	done 

	while [[ $CPANELUSERNAME == '' ]] # While CPANELUSERNAME is empty...
	do
		read -p "cPanel Username: " CPANELUSERNAME # Ask the user to enter the cPanel Username
	done 

	# Creating the staging script
	cat << EOF > /tmp/install_ssl_staging.sh
	#!/bin/bash
	curl https://get.acme.sh | sh
	source ~/.bashrc
	~/.acme.sh/acme.sh --update-account --accountemail $EMAIL
	~/.acme.sh/acme.sh --issue --webroot ~/public_html/ -d $DOMAIN -d www.$DOMAIN --staging
EOF
	# Creating the FORCE script. This is to be executed if the staging gives green
	cat << EOF > /tmp/install_ssl_force.sh
	#!/bin/bash
	~/.acme.sh/acme.sh --issue --webroot ~/public_html/ -d $DOMAIN -d www.$DOMAIN --force
	export DEPLOY_cPanel_USER=$CPANELUSERNAME
	~/.acme.sh/acme.sh --deploy --deploy-hook cpanel_uapi --domain $DOMAIN
	~/.acme.sh/acme.sh --deploy --deploy-hook cpanel_uapi --domain www.$DOMAIN
	crontab -l
EOF
	# Copying files to target server
	scp -P 21098 /tmp/install_ssl_staging.sh $SERVER:~ && scp -P 21098 /tmp/install_ssl_force.sh $SERVER:~

	# Instructions before enter the SSH
	echo "Make the scripts executable"
	echo ""
	echo "chmod +x install_ssl_staging.sh install_ssl_force.sh"
	echo ""
	echo "Then run install_ssl_staging.sh and if it succeeds, run the install_ssl_force.sh"
	echo ""

	#SSH into target server
	ssh -p 21098 $SERVER
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}…";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}

#Making sure that when connecting via SSH the ssh keys are copied
function sshn(){
	#ssh-copy-id $1
	ssh -p 21098 $1
}

#To reset TeamViewer settings and stop showing the warning
function teamviewer_reset(){
	sudo teamviewer --daemon stop
	sudo ifconfig eno1 down
	sudo macchanger -r eno1 > /dev/null
	sudo ifconfig eno1 up
	sudo rm -rf /opt/teamviewer/config/global.conf
	sudo teamviewer --daemon start
}

function ydl_update(){
	sudo youtube-dl -U &> /dev/null
	msgout success "youtube-dl updated!"
}

function repos(){
	cd /etc/yum.repos.d/
}

function myip(){
	myexternalip="$(curl https://ipinfo.io/ip 2>/dev/null)"
	mylocalip="$(ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1' | sed -n 1p)"
	msgout warning "External: ${myexternalip}"
	msgout success "Local: ${mylocalip}"
}

function compress_mp4(){
	filename=$(basename "$1")
	ffmpeg -i ${1} -c:v libx264 -profile:v baseline -level 3.0 -pix_fmt yuv420p "${filename%.*}"_compressed.mp4
}