#Download stuff from YouTube
function bookdl(){
	youtube-dl --ignore-errors -f bestaudio --extract-audio --audio-format mp3 --audio-quality 0 $1 -o '/mnt/Stuff/Dropbox/Public/AudioBooks/%(artist)s/%(album)s/%(title)s.%(ext)s'
}
function musicdl(){
	youtube-dl --ignore-errors -f bestaudio --extract-audio --audio-format mp3 --audio-quality 0 $1 -o '/mnt/Stuff/Dropbox/Música/%(title)s.%(ext)s'
}
function playlistdl(){
	youtube-dl --ignore-errors -f bestaudio --extract-audio --audio-format mp3 --audio-quality 0 $1 -o '/mnt/Stuff/Dropbox/Música/TMP/%(title)s.%(ext)s'
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}…";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}
#shutdown my server
function hpoff(){
	net rpc shutdown -C MESSAGE -I HPSERVER -U PJFonseca -f -t 1
}
#Update host files to block bad hosts
function updateblockedhosts(){
	sudo wget -O '/etc/hosts' 'https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/fakenews-gambling-porn/hosts' && sync
}
#Meteo in CLI
function meteo() {
  local LOCALE=$(echo ${LANG:-en} | cut -c1-2)
  if [ $# -eq 0 ]; then
    local LOCATION=$(curl -s ipinfo.io/loc)
  else
    local LOCATION=$1
  fi
  curl -s "$LOCALE.wttr.in/$LOCATION"
}

#Clears some dirs
function clean(){
	rm -r ~/Transferências/* 2> /dev/null
	rm -r ~/Imagens/* 2> /dev/null
	rm -rf ~/.local/share/Trash/* 2> /dev/null
} 
#Show the defined Custom Keyboard Shortcuts in Gnome
function kbshortcuts(){

	for i in `seq 0 9`;
	do
	echo "Custom Keybinding $i"
		gsettings get org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom$i/ name
		gsettings get org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom$i/ command
		gsettings get org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom$i/ binding
	echo
	echo
	done;
}

# Usage: extract <file>
# Description: extracts archived files / mounts disk images
# Note: .dmg/hdiutil is macOS-specific.
#
# credit: http://nparikh.org/notes/zshrc.txt
function extract () {
    if [ -f $1 ]; then
        case $1 in
            *.tar.bz2)  tar -jxvf $1                        ;;
            *.tar.gz)   tar -zxvf $1                        ;;
            *.bz2)      bunzip2 $1                          ;;
            *.dmg)      hdiutil mount $1                    ;;
            *.gz)       gunzip $1                           ;;
            *.tar)      tar -xvf $1                         ;;
            *.tbz2)     tar -jxvf $1                        ;;
            *.tgz)      tar -zxvf $1                        ;;
            *.zip)      unzip $1                            ;;
            *.ZIP)      unzip $1                            ;;
            *.pax)      cat $1 | pax -r                     ;;
            *.pax.Z)    uncompress $1 --stdout | pax -r     ;;
            *.rar)      unrar x $1                          ;;
            *.Z)        uncompress $1                       ;;
            *)          echo "'$1' cannot be extracted/mounted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function compress() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
	);

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

function ff() { 
	find . -type f -iname '*'"$*"'*' -ls 2>&1 | grep -v "Permission denied"; 
}

function backup(){
	local destiny="/mnt/Stuff/Dropbox/Documentos/LinuxBackup"

	#Clean Backup dir
	rm -rf ${destiny}/*

	if [ ! -d "${destiny}/.config/" ]; then
		mkdir "${destiny}/.config/"
	fi
	#vsCode
	cp -R ~/.config/Code/User ${destiny}/.config/Code/

	#DBeaver
	cp -R ~/.dbeaver4 ${destiny}/

	#Filezilla
	cp -R ~/.config/filezilla ${destiny}/.config/filezilla/
	#Keepassxc
	cp -R ~/.config/keepassxc ${destiny}/.config/keepassxc/
	#teamviewer
	cp -R ~/.config/teamviewer ${destiny}/.config/teamviewer/
	#VNC
	cp -R ~/.vnc ${destiny}/
	#variety
	cp -R ~/.config/variety ${destiny}/.config/variety/

	#dash-to-panel settings
	dconf dump /org/gnome/shell/extensions/dash-to-panel/ > ${destiny}/dtp_settings
}

function restore(){

	local source="/mnt/Stuff/Dropbox/Documentos/LinuxBackup"

	#Restore files from Dropbox
	cp -R ${source}/. ~/

	#dash-to-panel settings
	dconf load /org/gnome/shell/extensions/dash-to-panel/ < ${source}/dtp_settings
}

function getip() {
	curl -m 15 -s "https://httpbin.org/ip" | grep --color=no -oE '[0-9.]+' || curl -m 15 -s "ifconfig.me"
}

function getgateway() {
	local gw
	gw="$(route -n | grep -E '^0.0.0.0' | xargs | cut -d' ' -f2)"
	[ -n "$gw" ] && echo "$gw" || return 1
}

function checkinternet() {
	wget --timeout=15 "google.com" || wget --timeout=15 "bing.com"
	rm -R ~/index.html
}

function checkdns() {
	ping -c 1 -q "8.8.8.8"
}

function checkip() {

	local hostname="$(nmblookup -A "$1" | sed -n 2p | awk '{print $1}')"
	if [ "$(ping -c 1 -q "$1" | sed -n 4p | awk '{print $4}')" == 1 ]; then
		echo $hostname "is Online"
	else
		echo "Offline"
	fi
}

function checkgateway() {
	ping -c 1 -q "$(route -n | grep -E '^0.0.0.0' | xargs | cut -d' ' -f2)"
}

function flashtasmota(){
	#Flash my sonoff's with Tasmota
	wget -P /tmp/ http://sonoff.maddox.co.uk/tasmota/sonoff.bin
	sudo esptool.py --port /dev/ttyUSB0 --baud 115200 write_flash -fs 1MB -fm dout 0x0 /tmp/sonoff.bin
	rm -R /tmp/sonoff.bin
}

# This will generate two scripts and copy them to the target server
# that has cPanel on it and needs SSL certificates. 
# The port 21098 used by my provider (namecheap.com) in the SSH connections.
# Feel free to change.
#
# This is based on this tutorial: https://github.com/Neilpang/acme.sh/wiki/Simple-guide-to-add-TLS-cert-to-cpanel
# Thank you Neil Pang for this awesome script. Find him at https://twitter.com/neilpangxa

function install_remote_ssl(){
	
	#Gatering info needed
	local SERVER=""
	local EMAIL=""
	local DOMAIN=""
	local CPANELUSERNAME=""

	while [[ $SERVER == '' ]] # While SERVER is empty...
	do
		read -p "Server (username@domain): " SERVER # Ask the user to enter the server details
	done 
	
	while [[ $EMAIL == '' ]] # While EMAIL is empty...
	do
		read -p "Email: " EMAIL # Ask the user to enter the email
	done 
	
	while [[ $DOMAIN == '' ]] # While DOMAIN is empty...
	do
		read -p "Domain (without www): " DOMAIN # Ask the user to enter the domain
	done 

	while [[ $CPANELUSERNAME == '' ]] # While CPANELUSERNAME is empty...
	do
		read -p "cPanel Username: " CPANELUSERNAME # Ask the user to enter the cPanel Username
	done 

	# Creating the staging script
	cat << EOF > /tmp/install_ssl_staging.sh
	#!/bin/bash
	curl https://get.acme.sh | sh
	source ~/.bashrc
	~/.acme.sh/acme.sh --update-account --accountemail $EMAIL
	~/.acme.sh/acme.sh --issue --webroot ~/public_html/ -d $DOMAIN -d www.$DOMAIN --staging
EOF
	# Creating the FORCE script. This is to be executed if the staging gives green
	cat << EOF > /tmp/install_ssl_force.sh
	#!/bin/bash
	~/.acme.sh/acme.sh --issue --webroot ~/public_html/ -d $DOMAIN -d www.$DOMAIN --force
	export DEPLOY_cPanel_USER=$CPANELUSERNAME
	~/.acme.sh/acme.sh --deploy --deploy-hook cpanel_uapi --domain $DOMAIN
	~/.acme.sh/acme.sh --deploy --deploy-hook cpanel_uapi --domain www.$DOMAIN
	crontab -l
EOF
	# Copying files to target server
	scp -P 21098 /tmp/install_ssl_staging.sh $SERVER:~ && scp -P 21098 /tmp/install_ssl_force.sh $SERVER:~

	# Instructions before enter the SSH
	echo "Make the scripts executable"
	echo ""
	echo "chmod +x install_ssl_staging.sh install_ssl_force.sh"
	echo ""
	echo "Then run install_ssl_staging.sh and if it succeeds, run the install_ssl_force.sh"
	echo ""

	#SSH into target server
	ssh -p 21098 $SERVER
}

# Install Postman. Kudos to: https://medium.com/@udomsak/install-postman-on-fedora-core-29-5e09941d804e
function install_postman(){
    wget -P /tmp/ https://dl.pstmn.io/download/latest/linux64 -O postman-linux-x64.tar.gz
    sudo tar xvzf /tmp/postman-linux-x64.tar.gz -C /opt
    sudo ln -s /opt/Postman/Postman /usr/bin/postman
    
    cat << EOF > ~/.local/share/applications/postman2.desktop
    [Desktop Entry]
    Name=Postman
    GenericName=API Client
    X-GNOME-FullName=Postman API Client
    Comment=Make and view REST API calls and responses
    Keywords=api;
    Exec=/opt/Postman/Postman
    Terminal=false
    Type=Application
    Icon=/opt/Postman/app/resources/app/assets/icon.png
    Categories=Development;Utilities;
EOF
}
function install_dbeaver(){
		wget -P /tmp/ https://dbeaver.io/files/dbeaver-ce-latest-stable.x86_64.rpm
    sudo rpm -Uhv /tmp/dbeaver-ce-latest-stable.x86_64.rpm
}
# Install Brother HLL2360DW
function install_printer(){
		wget -P /tmp/ https://download.brother.com/welcome/dlf006893/linux-brprinter-installer-2.2.1-1.gz
		sudo gunzip /tmp/linux-brprinter-installer-2.2.1-1.gz
		sudo chmod +x /tmp/linux-brprinter-installer-2.1.1-1
		sudo /tmp/linux-brprinter-installer-2.1.1-1 HLL2360D
}

function install_dotfiles(){
	rm -rf ~/.bashrc
	ln -s ~/.dotfiles/.bashrc ~/.bashrc
	rm -rf ~/.gitconfig
	ln -s ~/.dotfiles/.gitconfig ~/.gitconfig
	rm -rf ~/.bash_prompt
	ln -s ~/.dotfiles/.bash_prompt ~/.bash_prompt
}

function man2pdf(){	
	man -t $1 | ps2pdf - ~/Transferências/$1.pdf
}