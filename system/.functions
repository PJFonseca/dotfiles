#Download stuff from YouTube
function ytdl(){

    if [ -z "${1}" ]; then
		echo "ERROR: No url specified";
        return 1;
    fi;
    if [ -z "${2}" ]; then
        echo "ERROR: No type specified.";
        return 2;
    fi;

    if [ $2=='1' ]; then
        youtube-dl -f bestaudio --extract-audio --audio-format mp3 --audio-quality 0 $1
    else
        youtube-dl $1
    fi
}

function audiobookdl(){
	youtube-dl -f bestaudio --extract-audio --audio-format mp3 --audio-quality 0 $1 -o '/mnt/Stuff/Dropbox/Public/AudioBooks/%(artist)s/%(album)s/%(title)s.%(ext)s'
}
function musicdl(){
	youtube-dl -f bestaudio --extract-audio --audio-format mp3 --audio-quality 0 $1 -o '/mnt/Stuff/Dropbox/Música/%(title)s.%(ext)s'
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}…";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}
#shutdown my server
function hpoff(){
	net rpc shutdown -C MESSAGE -I HPSERVER -U PJFonseca -f -t 1
}
#Meteo in CLI
function meteo() {
  local LOCALE=$(echo ${LANG:-en} | cut -c1-2)
  if [ $# -eq 0 ]; then
    local LOCATION=$(curl -s ipinfo.io/loc)
  else
    local LOCATION=$1
  fi
  curl -s "$LOCALE.wttr.in/$LOCATION"
}

#Clears the Download dir
function clean(){
	rm -r ~/Transferências/*
} 
#Show the defined Custom Keyboard Shortcuts in Gnome
function kbshortcuts(){

	for i in `seq 0 9`;
	do
	echo "Custom Keybinding $i"
		gsettings get org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom$i/ name
		gsettings get org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom$i/ command
		gsettings get org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom$i/ binding
	echo
	echo
	done;
}

# Usage: extract <file>
# Description: extracts archived files / mounts disk images
# Note: .dmg/hdiutil is macOS-specific.
#
# credit: http://nparikh.org/notes/zshrc.txt
function extract () {
    if [ -f $1 ]; then
        case $1 in
            *.tar.bz2)  tar -jxvf $1                        ;;
            *.tar.gz)   tar -zxvf $1                        ;;
            *.bz2)      bunzip2 $1                          ;;
            *.dmg)      hdiutil mount $1                    ;;
            *.gz)       gunzip $1                           ;;
            *.tar)      tar -xvf $1                         ;;
            *.tbz2)     tar -jxvf $1                        ;;
            *.tgz)      tar -zxvf $1                        ;;
            *.zip)      unzip $1                            ;;
            *.ZIP)      unzip $1                            ;;
            *.pax)      cat $1 | pax -r                     ;;
            *.pax.Z)    uncompress $1 --stdout | pax -r     ;;
            *.rar)      unrar x $1                          ;;
            *.Z)        uncompress $1                       ;;
            *)          echo "'$1' cannot be extracted/mounted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function compress() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
	);

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

function ff() { 
	find . -type f -iname '*'"$*"'*' -ls 2>&1 | grep -v "Permission denied"; 
}

function backup(){
	local destiny="/mnt/Stuff/Dropbox/Documentos/LinuxBackup"

	#Clean Backup dir
	rm -rf ${destiny}/*

	if [ ! -d "${destiny}/.config/" ]; then
		mkdir "${destiny}/.config/"
	fi
	#vsCode
	cp -R ~/.config/Code/User ${destiny}/.config/Code/

	#DBeaver
	cp -R ~/.dbeaver4 ${destiny}/

	#Filezilla
	cp -R ~/.config/filezilla ${destiny}/.config/filezilla/
	#Keepassxc
	cp -R ~/.config/keepassxc ${destiny}/.config/keepassxc/
	#teamviewer
	cp -R ~/.config/teamviewer ${destiny}/.config/teamviewer/
	#VNC
	cp -R ~/.vnc ${destiny}/
	#variety
	cp -R ~/.config/variety ${destiny}/.config/variety/
}

function restore(){
	#Restore files from Dropbox
	cp -R /mnt/Stuff/Dropbox/Documentos/LinuxBackup/. ~/
}